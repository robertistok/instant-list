type AggregateIngredient {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateTodoistProject {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

scalar DateTime

type Ingredient {
  id: ID!
  recipe: Recipe
  name: String!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
  createdAt: DateTime!
  updatedAt: DateTime!
}

type IngredientConnection {
  pageInfo: PageInfo!
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  recipe: RecipeCreateOneWithoutIngredientsInput
  name: String!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input IngredientCreateManyWithoutRecipeInput {
  create: [IngredientCreateWithoutRecipeInput!]
  connect: [IngredientWhereUniqueInput!]
}

input IngredientCreateWithoutRecipeInput {
  name: String!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

type IngredientEdge {
  node: Ingredient!
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  quantity_ASC
  quantity_DESC
  measurementUnit_ASC
  measurementUnit_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
  createdAt: DateTime!
  updatedAt: DateTime!
}

input IngredientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  measurementUnit: MEASUREMENT_UNIT
  measurementUnit_not: MEASUREMENT_UNIT
  measurementUnit_in: [MEASUREMENT_UNIT!]
  measurementUnit_not_in: [MEASUREMENT_UNIT!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [IngredientScalarWhereInput!]
  OR: [IngredientScalarWhereInput!]
  NOT: [IngredientScalarWhereInput!]
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
  AND: [IngredientSubscriptionWhereInput!]
  OR: [IngredientSubscriptionWhereInput!]
  NOT: [IngredientSubscriptionWhereInput!]
}

input IngredientUpdateInput {
  recipe: RecipeUpdateOneWithoutIngredientsInput
  name: String
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input IngredientUpdateManyDataInput {
  name: String
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input IngredientUpdateManyMutationInput {
  name: String
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input IngredientUpdateManyWithoutRecipeInput {
  create: [IngredientCreateWithoutRecipeInput!]
  delete: [IngredientWhereUniqueInput!]
  connect: [IngredientWhereUniqueInput!]
  set: [IngredientWhereUniqueInput!]
  disconnect: [IngredientWhereUniqueInput!]
  update: [IngredientUpdateWithWhereUniqueWithoutRecipeInput!]
  upsert: [IngredientUpsertWithWhereUniqueWithoutRecipeInput!]
  deleteMany: [IngredientScalarWhereInput!]
  updateMany: [IngredientUpdateManyWithWhereNestedInput!]
}

input IngredientUpdateManyWithWhereNestedInput {
  where: IngredientScalarWhereInput!
  data: IngredientUpdateManyDataInput!
}

input IngredientUpdateWithoutRecipeDataInput {
  name: String
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input IngredientUpdateWithWhereUniqueWithoutRecipeInput {
  where: IngredientWhereUniqueInput!
  data: IngredientUpdateWithoutRecipeDataInput!
}

input IngredientUpsertWithWhereUniqueWithoutRecipeInput {
  where: IngredientWhereUniqueInput!
  update: IngredientUpdateWithoutRecipeDataInput!
  create: IngredientCreateWithoutRecipeInput!
}

input IngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  recipe: RecipeWhereInput
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  measurementUnit: MEASUREMENT_UNIT
  measurementUnit_not: MEASUREMENT_UNIT
  measurementUnit_in: [MEASUREMENT_UNIT!]
  measurementUnit_not_in: [MEASUREMENT_UNIT!]
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
}

input IngredientWhereUniqueInput {
  id: ID
}

scalar Long

enum MEASUREMENT_UNIT {
  Gram
  Kilogram
  Liter
  Mililiter
  Teaspoon
  Tablespoon
}

type Mutation {
  createIngredient(data: IngredientCreateInput!): Ingredient!
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  createRecipe(data: RecipeCreateInput!): Recipe!
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateManyRecipes(data: RecipeUpdateManyMutationInput!, where: RecipeWhereInput): BatchPayload!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  createTodoistProject(data: TodoistProjectCreateInput!): TodoistProject!
  updateTodoistProject(data: TodoistProjectUpdateInput!, where: TodoistProjectWhereUniqueInput!): TodoistProject
  updateManyTodoistProjects(data: TodoistProjectUpdateManyMutationInput!, where: TodoistProjectWhereInput): BatchPayload!
  upsertTodoistProject(where: TodoistProjectWhereUniqueInput!, create: TodoistProjectCreateInput!, update: TodoistProjectUpdateInput!): TodoistProject!
  deleteTodoistProject(where: TodoistProjectWhereUniqueInput!): TodoistProject
  deleteManyTodoistProjects(where: TodoistProjectWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  todoistProject(where: TodoistProjectWhereUniqueInput!): TodoistProject
  todoistProjects(where: TodoistProjectWhereInput, orderBy: TodoistProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TodoistProject]!
  todoistProjectsConnection(where: TodoistProjectWhereInput, orderBy: TodoistProjectOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TodoistProjectConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Recipe {
  id: ID!
  user: User!
  title: String!
  description: String!
  steps: [String!]!
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient!]
  servings: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecipeConnection {
  pageInfo: PageInfo!
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

input RecipeCreateInput {
  user: UserCreateOneInput!
  title: String!
  description: String!
  steps: RecipeCreatestepsInput
  ingredients: IngredientCreateManyWithoutRecipeInput
  servings: Int
}

input RecipeCreateOneWithoutIngredientsInput {
  create: RecipeCreateWithoutIngredientsInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreatestepsInput {
  set: [String!]
}

input RecipeCreateWithoutIngredientsInput {
  user: UserCreateOneInput!
  title: String!
  description: String!
  steps: RecipeCreatestepsInput
  servings: Int
}

type RecipeEdge {
  node: Recipe!
  cursor: String!
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  servings_ASC
  servings_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RecipePreviousValues {
  id: ID!
  title: String!
  description: String!
  steps: [String!]!
  servings: Int
  createdAt: DateTime!
  updatedAt: DateTime!
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
  AND: [RecipeSubscriptionWhereInput!]
  OR: [RecipeSubscriptionWhereInput!]
  NOT: [RecipeSubscriptionWhereInput!]
}

input RecipeUpdateInput {
  user: UserUpdateOneRequiredInput
  title: String
  description: String
  steps: RecipeUpdatestepsInput
  ingredients: IngredientUpdateManyWithoutRecipeInput
  servings: Int
}

input RecipeUpdateManyMutationInput {
  title: String
  description: String
  steps: RecipeUpdatestepsInput
  servings: Int
}

input RecipeUpdateOneWithoutIngredientsInput {
  create: RecipeCreateWithoutIngredientsInput
  update: RecipeUpdateWithoutIngredientsDataInput
  upsert: RecipeUpsertWithoutIngredientsInput
  delete: Boolean
  disconnect: Boolean
  connect: RecipeWhereUniqueInput
}

input RecipeUpdatestepsInput {
  set: [String!]
}

input RecipeUpdateWithoutIngredientsDataInput {
  user: UserUpdateOneRequiredInput
  title: String
  description: String
  steps: RecipeUpdatestepsInput
  servings: Int
}

input RecipeUpsertWithoutIngredientsInput {
  update: RecipeUpdateWithoutIngredientsDataInput!
  create: RecipeCreateWithoutIngredientsInput!
}

input RecipeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user: UserWhereInput
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  ingredients_every: IngredientWhereInput
  ingredients_some: IngredientWhereInput
  ingredients_none: IngredientWhereInput
  servings: Int
  servings_not: Int
  servings_in: [Int!]
  servings_not_in: [Int!]
  servings_lt: Int
  servings_lte: Int
  servings_gt: Int
  servings_gte: Int
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
}

input RecipeWhereUniqueInput {
  id: ID
}

type Subscription {
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
  todoistProject(where: TodoistProjectSubscriptionWhereInput): TodoistProjectSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type TodoistProject {
  id: ID!
  todoistId: Float!
  name: String!
  color: Int!
  parentId: Float
  childOrder: Int
  collapsed: Int!
  shared: Boolean
  inboxProject: Boolean
  teamInbox: Boolean
  isDeleted: Int!
  isArchived: Int!
  isFavorite: Int!
}

type TodoistProjectConnection {
  pageInfo: PageInfo!
  edges: [TodoistProjectEdge]!
  aggregate: AggregateTodoistProject!
}

input TodoistProjectCreateInput {
  todoistId: Float!
  name: String!
  color: Int!
  parentId: Float
  childOrder: Int
  collapsed: Int!
  shared: Boolean
  inboxProject: Boolean
  teamInbox: Boolean
  isDeleted: Int!
  isArchived: Int!
  isFavorite: Int!
}

input TodoistProjectCreateOneInput {
  create: TodoistProjectCreateInput
  connect: TodoistProjectWhereUniqueInput
}

type TodoistProjectEdge {
  node: TodoistProject!
  cursor: String!
}

enum TodoistProjectOrderByInput {
  id_ASC
  id_DESC
  todoistId_ASC
  todoistId_DESC
  name_ASC
  name_DESC
  color_ASC
  color_DESC
  parentId_ASC
  parentId_DESC
  childOrder_ASC
  childOrder_DESC
  collapsed_ASC
  collapsed_DESC
  shared_ASC
  shared_DESC
  inboxProject_ASC
  inboxProject_DESC
  teamInbox_ASC
  teamInbox_DESC
  isDeleted_ASC
  isDeleted_DESC
  isArchived_ASC
  isArchived_DESC
  isFavorite_ASC
  isFavorite_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type TodoistProjectPreviousValues {
  id: ID!
  todoistId: Float!
  name: String!
  color: Int!
  parentId: Float
  childOrder: Int
  collapsed: Int!
  shared: Boolean
  inboxProject: Boolean
  teamInbox: Boolean
  isDeleted: Int!
  isArchived: Int!
  isFavorite: Int!
}

type TodoistProjectSubscriptionPayload {
  mutation: MutationType!
  node: TodoistProject
  updatedFields: [String!]
  previousValues: TodoistProjectPreviousValues
}

input TodoistProjectSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: TodoistProjectWhereInput
  AND: [TodoistProjectSubscriptionWhereInput!]
  OR: [TodoistProjectSubscriptionWhereInput!]
  NOT: [TodoistProjectSubscriptionWhereInput!]
}

input TodoistProjectUpdateDataInput {
  todoistId: Float
  name: String
  color: Int
  parentId: Float
  childOrder: Int
  collapsed: Int
  shared: Boolean
  inboxProject: Boolean
  teamInbox: Boolean
  isDeleted: Int
  isArchived: Int
  isFavorite: Int
}

input TodoistProjectUpdateInput {
  todoistId: Float
  name: String
  color: Int
  parentId: Float
  childOrder: Int
  collapsed: Int
  shared: Boolean
  inboxProject: Boolean
  teamInbox: Boolean
  isDeleted: Int
  isArchived: Int
  isFavorite: Int
}

input TodoistProjectUpdateManyMutationInput {
  todoistId: Float
  name: String
  color: Int
  parentId: Float
  childOrder: Int
  collapsed: Int
  shared: Boolean
  inboxProject: Boolean
  teamInbox: Boolean
  isDeleted: Int
  isArchived: Int
  isFavorite: Int
}

input TodoistProjectUpdateOneInput {
  create: TodoistProjectCreateInput
  update: TodoistProjectUpdateDataInput
  upsert: TodoistProjectUpsertNestedInput
  delete: Boolean
  disconnect: Boolean
  connect: TodoistProjectWhereUniqueInput
}

input TodoistProjectUpsertNestedInput {
  update: TodoistProjectUpdateDataInput!
  create: TodoistProjectCreateInput!
}

input TodoistProjectWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  todoistId: Float
  todoistId_not: Float
  todoistId_in: [Float!]
  todoistId_not_in: [Float!]
  todoistId_lt: Float
  todoistId_lte: Float
  todoistId_gt: Float
  todoistId_gte: Float
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  color: Int
  color_not: Int
  color_in: [Int!]
  color_not_in: [Int!]
  color_lt: Int
  color_lte: Int
  color_gt: Int
  color_gte: Int
  parentId: Float
  parentId_not: Float
  parentId_in: [Float!]
  parentId_not_in: [Float!]
  parentId_lt: Float
  parentId_lte: Float
  parentId_gt: Float
  parentId_gte: Float
  childOrder: Int
  childOrder_not: Int
  childOrder_in: [Int!]
  childOrder_not_in: [Int!]
  childOrder_lt: Int
  childOrder_lte: Int
  childOrder_gt: Int
  childOrder_gte: Int
  collapsed: Int
  collapsed_not: Int
  collapsed_in: [Int!]
  collapsed_not_in: [Int!]
  collapsed_lt: Int
  collapsed_lte: Int
  collapsed_gt: Int
  collapsed_gte: Int
  shared: Boolean
  shared_not: Boolean
  inboxProject: Boolean
  inboxProject_not: Boolean
  teamInbox: Boolean
  teamInbox_not: Boolean
  isDeleted: Int
  isDeleted_not: Int
  isDeleted_in: [Int!]
  isDeleted_not_in: [Int!]
  isDeleted_lt: Int
  isDeleted_lte: Int
  isDeleted_gt: Int
  isDeleted_gte: Int
  isArchived: Int
  isArchived_not: Int
  isArchived_in: [Int!]
  isArchived_not_in: [Int!]
  isArchived_lt: Int
  isArchived_lte: Int
  isArchived_gt: Int
  isArchived_gte: Int
  isFavorite: Int
  isFavorite_not: Int
  isFavorite_in: [Int!]
  isFavorite_not_in: [Int!]
  isFavorite_lt: Int
  isFavorite_lte: Int
  isFavorite_gt: Int
  isFavorite_gte: Int
  AND: [TodoistProjectWhereInput!]
  OR: [TodoistProjectWhereInput!]
  NOT: [TodoistProjectWhereInput!]
}

input TodoistProjectWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  todoistId: Int!
  todoistAccessToken: String
  name: String
  email: String
  shoppingList: TodoistProject
  avatarSmall: String
  avatarMedium: String
  avatarBig: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  todoistId: Int!
  todoistAccessToken: String
  name: String
  email: String
  shoppingList: TodoistProjectCreateOneInput
  avatarSmall: String
  avatarMedium: String
  avatarBig: String
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  todoistId_ASC
  todoistId_DESC
  todoistAccessToken_ASC
  todoistAccessToken_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  avatarSmall_ASC
  avatarSmall_DESC
  avatarMedium_ASC
  avatarMedium_DESC
  avatarBig_ASC
  avatarBig_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type UserPreviousValues {
  id: ID!
  todoistId: Int!
  todoistAccessToken: String
  name: String
  email: String
  avatarSmall: String
  avatarMedium: String
  avatarBig: String
  createdAt: DateTime!
  updatedAt: DateTime!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  todoistId: Int
  todoistAccessToken: String
  name: String
  email: String
  shoppingList: TodoistProjectUpdateOneInput
  avatarSmall: String
  avatarMedium: String
  avatarBig: String
}

input UserUpdateInput {
  todoistId: Int
  todoistAccessToken: String
  name: String
  email: String
  shoppingList: TodoistProjectUpdateOneInput
  avatarSmall: String
  avatarMedium: String
  avatarBig: String
}

input UserUpdateManyMutationInput {
  todoistId: Int
  todoistAccessToken: String
  name: String
  email: String
  avatarSmall: String
  avatarMedium: String
  avatarBig: String
}

input UserUpdateOneRequiredInput {
  create: UserCreateInput
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
  connect: UserWhereUniqueInput
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  todoistId: Int
  todoistId_not: Int
  todoistId_in: [Int!]
  todoistId_not_in: [Int!]
  todoistId_lt: Int
  todoistId_lte: Int
  todoistId_gt: Int
  todoistId_gte: Int
  todoistAccessToken: String
  todoistAccessToken_not: String
  todoistAccessToken_in: [String!]
  todoistAccessToken_not_in: [String!]
  todoistAccessToken_lt: String
  todoistAccessToken_lte: String
  todoistAccessToken_gt: String
  todoistAccessToken_gte: String
  todoistAccessToken_contains: String
  todoistAccessToken_not_contains: String
  todoistAccessToken_starts_with: String
  todoistAccessToken_not_starts_with: String
  todoistAccessToken_ends_with: String
  todoistAccessToken_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  shoppingList: TodoistProjectWhereInput
  avatarSmall: String
  avatarSmall_not: String
  avatarSmall_in: [String!]
  avatarSmall_not_in: [String!]
  avatarSmall_lt: String
  avatarSmall_lte: String
  avatarSmall_gt: String
  avatarSmall_gte: String
  avatarSmall_contains: String
  avatarSmall_not_contains: String
  avatarSmall_starts_with: String
  avatarSmall_not_starts_with: String
  avatarSmall_ends_with: String
  avatarSmall_not_ends_with: String
  avatarMedium: String
  avatarMedium_not: String
  avatarMedium_in: [String!]
  avatarMedium_not_in: [String!]
  avatarMedium_lt: String
  avatarMedium_lte: String
  avatarMedium_gt: String
  avatarMedium_gte: String
  avatarMedium_contains: String
  avatarMedium_not_contains: String
  avatarMedium_starts_with: String
  avatarMedium_not_starts_with: String
  avatarMedium_ends_with: String
  avatarMedium_not_ends_with: String
  avatarBig: String
  avatarBig_not: String
  avatarBig_in: [String!]
  avatarBig_not_in: [String!]
  avatarBig_lt: String
  avatarBig_lte: String
  avatarBig_gt: String
  avatarBig_gte: String
  avatarBig_contains: String
  avatarBig_not_contains: String
  avatarBig_starts_with: String
  avatarBig_not_starts_with: String
  avatarBig_ends_with: String
  avatarBig_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  todoistId: Int
  email: String
}
