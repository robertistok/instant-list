type AggregateIngredient {
  count: Int!
}

type AggregateRecipe {
  count: Int!
}

type AggregateRecipeIngredient {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Ingredient {
  id: ID!
  name: String!
}

type IngredientConnection {
  pageInfo: PageInfo!
  edges: [IngredientEdge]!
  aggregate: AggregateIngredient!
}

input IngredientCreateInput {
  id: ID
  name: String!
}

input IngredientCreateOneInput {
  create: IngredientCreateInput
  connect: IngredientWhereUniqueInput
}

type IngredientEdge {
  node: Ingredient!
  cursor: String!
}

enum IngredientOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type IngredientPreviousValues {
  id: ID!
  name: String!
}

type IngredientSubscriptionPayload {
  mutation: MutationType!
  node: Ingredient
  updatedFields: [String!]
  previousValues: IngredientPreviousValues
}

input IngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IngredientWhereInput
  AND: [IngredientSubscriptionWhereInput!]
  OR: [IngredientSubscriptionWhereInput!]
  NOT: [IngredientSubscriptionWhereInput!]
}

input IngredientUpdateDataInput {
  name: String
}

input IngredientUpdateInput {
  name: String
}

input IngredientUpdateManyMutationInput {
  name: String
}

input IngredientUpdateOneRequiredInput {
  create: IngredientCreateInput
  update: IngredientUpdateDataInput
  upsert: IngredientUpsertNestedInput
  connect: IngredientWhereUniqueInput
}

input IngredientUpsertNestedInput {
  update: IngredientUpdateDataInput!
  create: IngredientCreateInput!
}

input IngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [IngredientWhereInput!]
  OR: [IngredientWhereInput!]
  NOT: [IngredientWhereInput!]
}

input IngredientWhereUniqueInput {
  id: ID
}

scalar Long

enum MEASUREMENT_UNIT {
  Gram
  Kilogram
  Liter
  Mililiter
}

type Mutation {
  createIngredient(data: IngredientCreateInput!): Ingredient!
  updateIngredient(data: IngredientUpdateInput!, where: IngredientWhereUniqueInput!): Ingredient
  updateManyIngredients(data: IngredientUpdateManyMutationInput!, where: IngredientWhereInput): BatchPayload!
  upsertIngredient(where: IngredientWhereUniqueInput!, create: IngredientCreateInput!, update: IngredientUpdateInput!): Ingredient!
  deleteIngredient(where: IngredientWhereUniqueInput!): Ingredient
  deleteManyIngredients(where: IngredientWhereInput): BatchPayload!
  createRecipe(data: RecipeCreateInput!): Recipe!
  updateRecipe(data: RecipeUpdateInput!, where: RecipeWhereUniqueInput!): Recipe
  updateManyRecipes(data: RecipeUpdateManyMutationInput!, where: RecipeWhereInput): BatchPayload!
  upsertRecipe(where: RecipeWhereUniqueInput!, create: RecipeCreateInput!, update: RecipeUpdateInput!): Recipe!
  deleteRecipe(where: RecipeWhereUniqueInput!): Recipe
  deleteManyRecipes(where: RecipeWhereInput): BatchPayload!
  createRecipeIngredient(data: RecipeIngredientCreateInput!): RecipeIngredient!
  updateRecipeIngredient(data: RecipeIngredientUpdateInput!, where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  updateManyRecipeIngredients(data: RecipeIngredientUpdateManyMutationInput!, where: RecipeIngredientWhereInput): BatchPayload!
  upsertRecipeIngredient(where: RecipeIngredientWhereUniqueInput!, create: RecipeIngredientCreateInput!, update: RecipeIngredientUpdateInput!): RecipeIngredient!
  deleteRecipeIngredient(where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  deleteManyRecipeIngredients(where: RecipeIngredientWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  ingredient(where: IngredientWhereUniqueInput!): Ingredient
  ingredients(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Ingredient]!
  ingredientsConnection(where: IngredientWhereInput, orderBy: IngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IngredientConnection!
  recipe(where: RecipeWhereUniqueInput!): Recipe
  recipes(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Recipe]!
  recipesConnection(where: RecipeWhereInput, orderBy: RecipeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeConnection!
  recipeIngredient(where: RecipeIngredientWhereUniqueInput!): RecipeIngredient
  recipeIngredients(where: RecipeIngredientWhereInput, orderBy: RecipeIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeIngredient]!
  recipeIngredientsConnection(where: RecipeIngredientWhereInput, orderBy: RecipeIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RecipeIngredientConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Recipe {
  id: ID!
  title: String!
  description: String!
  ingredients(where: RecipeIngredientWhereInput, orderBy: RecipeIngredientOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RecipeIngredient!]
  servings: Int
}

type RecipeConnection {
  pageInfo: PageInfo!
  edges: [RecipeEdge]!
  aggregate: AggregateRecipe!
}

input RecipeCreateInput {
  id: ID
  title: String!
  description: String!
  ingredients: RecipeIngredientCreateManyWithoutRecipeInput
  servings: Int
}

input RecipeCreateOneWithoutIngredientsInput {
  create: RecipeCreateWithoutIngredientsInput
  connect: RecipeWhereUniqueInput
}

input RecipeCreateWithoutIngredientsInput {
  id: ID
  title: String!
  description: String!
  servings: Int
}

type RecipeEdge {
  node: Recipe!
  cursor: String!
}

type RecipeIngredient {
  id: ID!
  recipe: Recipe!
  ingredient: Ingredient!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

type RecipeIngredientConnection {
  pageInfo: PageInfo!
  edges: [RecipeIngredientEdge]!
  aggregate: AggregateRecipeIngredient!
}

input RecipeIngredientCreateInput {
  id: ID
  recipe: RecipeCreateOneWithoutIngredientsInput!
  ingredient: IngredientCreateOneInput!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input RecipeIngredientCreateManyWithoutRecipeInput {
  create: [RecipeIngredientCreateWithoutRecipeInput!]
  connect: [RecipeIngredientWhereUniqueInput!]
}

input RecipeIngredientCreateWithoutRecipeInput {
  id: ID
  ingredient: IngredientCreateOneInput!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

type RecipeIngredientEdge {
  node: RecipeIngredient!
  cursor: String!
}

enum RecipeIngredientOrderByInput {
  id_ASC
  id_DESC
  quantity_ASC
  quantity_DESC
  measurementUnit_ASC
  measurementUnit_DESC
}

type RecipeIngredientPreviousValues {
  id: ID!
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input RecipeIngredientScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  measurementUnit: MEASUREMENT_UNIT
  measurementUnit_not: MEASUREMENT_UNIT
  measurementUnit_in: [MEASUREMENT_UNIT!]
  measurementUnit_not_in: [MEASUREMENT_UNIT!]
  AND: [RecipeIngredientScalarWhereInput!]
  OR: [RecipeIngredientScalarWhereInput!]
  NOT: [RecipeIngredientScalarWhereInput!]
}

type RecipeIngredientSubscriptionPayload {
  mutation: MutationType!
  node: RecipeIngredient
  updatedFields: [String!]
  previousValues: RecipeIngredientPreviousValues
}

input RecipeIngredientSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipeIngredientWhereInput
  AND: [RecipeIngredientSubscriptionWhereInput!]
  OR: [RecipeIngredientSubscriptionWhereInput!]
  NOT: [RecipeIngredientSubscriptionWhereInput!]
}

input RecipeIngredientUpdateInput {
  recipe: RecipeUpdateOneRequiredWithoutIngredientsInput
  ingredient: IngredientUpdateOneRequiredInput
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input RecipeIngredientUpdateManyDataInput {
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input RecipeIngredientUpdateManyMutationInput {
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input RecipeIngredientUpdateManyWithoutRecipeInput {
  create: [RecipeIngredientCreateWithoutRecipeInput!]
  delete: [RecipeIngredientWhereUniqueInput!]
  connect: [RecipeIngredientWhereUniqueInput!]
  set: [RecipeIngredientWhereUniqueInput!]
  disconnect: [RecipeIngredientWhereUniqueInput!]
  update: [RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput!]
  upsert: [RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput!]
  deleteMany: [RecipeIngredientScalarWhereInput!]
  updateMany: [RecipeIngredientUpdateManyWithWhereNestedInput!]
}

input RecipeIngredientUpdateManyWithWhereNestedInput {
  where: RecipeIngredientScalarWhereInput!
  data: RecipeIngredientUpdateManyDataInput!
}

input RecipeIngredientUpdateWithoutRecipeDataInput {
  ingredient: IngredientUpdateOneRequiredInput
  quantity: Float
  measurementUnit: MEASUREMENT_UNIT
}

input RecipeIngredientUpdateWithWhereUniqueWithoutRecipeInput {
  where: RecipeIngredientWhereUniqueInput!
  data: RecipeIngredientUpdateWithoutRecipeDataInput!
}

input RecipeIngredientUpsertWithWhereUniqueWithoutRecipeInput {
  where: RecipeIngredientWhereUniqueInput!
  update: RecipeIngredientUpdateWithoutRecipeDataInput!
  create: RecipeIngredientCreateWithoutRecipeInput!
}

input RecipeIngredientWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  recipe: RecipeWhereInput
  ingredient: IngredientWhereInput
  quantity: Float
  quantity_not: Float
  quantity_in: [Float!]
  quantity_not_in: [Float!]
  quantity_lt: Float
  quantity_lte: Float
  quantity_gt: Float
  quantity_gte: Float
  measurementUnit: MEASUREMENT_UNIT
  measurementUnit_not: MEASUREMENT_UNIT
  measurementUnit_in: [MEASUREMENT_UNIT!]
  measurementUnit_not_in: [MEASUREMENT_UNIT!]
  AND: [RecipeIngredientWhereInput!]
  OR: [RecipeIngredientWhereInput!]
  NOT: [RecipeIngredientWhereInput!]
}

input RecipeIngredientWhereUniqueInput {
  id: ID
}

enum RecipeOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  description_ASC
  description_DESC
  servings_ASC
  servings_DESC
}

type RecipePreviousValues {
  id: ID!
  title: String!
  description: String!
  servings: Int
}

type RecipeSubscriptionPayload {
  mutation: MutationType!
  node: Recipe
  updatedFields: [String!]
  previousValues: RecipePreviousValues
}

input RecipeSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RecipeWhereInput
  AND: [RecipeSubscriptionWhereInput!]
  OR: [RecipeSubscriptionWhereInput!]
  NOT: [RecipeSubscriptionWhereInput!]
}

input RecipeUpdateInput {
  title: String
  description: String
  ingredients: RecipeIngredientUpdateManyWithoutRecipeInput
  servings: Int
}

input RecipeUpdateManyMutationInput {
  title: String
  description: String
  servings: Int
}

input RecipeUpdateOneRequiredWithoutIngredientsInput {
  create: RecipeCreateWithoutIngredientsInput
  update: RecipeUpdateWithoutIngredientsDataInput
  upsert: RecipeUpsertWithoutIngredientsInput
  connect: RecipeWhereUniqueInput
}

input RecipeUpdateWithoutIngredientsDataInput {
  title: String
  description: String
  servings: Int
}

input RecipeUpsertWithoutIngredientsInput {
  update: RecipeUpdateWithoutIngredientsDataInput!
  create: RecipeCreateWithoutIngredientsInput!
}

input RecipeWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  ingredients_every: RecipeIngredientWhereInput
  ingredients_some: RecipeIngredientWhereInput
  ingredients_none: RecipeIngredientWhereInput
  servings: Int
  servings_not: Int
  servings_in: [Int!]
  servings_not_in: [Int!]
  servings_lt: Int
  servings_lte: Int
  servings_gt: Int
  servings_gte: Int
  AND: [RecipeWhereInput!]
  OR: [RecipeWhereInput!]
  NOT: [RecipeWhereInput!]
}

input RecipeWhereUniqueInput {
  id: ID
}

type Subscription {
  ingredient(where: IngredientSubscriptionWhereInput): IngredientSubscriptionPayload
  recipe(where: RecipeSubscriptionWhereInput): RecipeSubscriptionPayload
  recipeIngredient(where: RecipeIngredientSubscriptionWhereInput): RecipeIngredientSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  name: String
  email: String
  revision: Int
  wunderlistAccessToken: String
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  name: String
  email: String
  revision: Int
  wunderlistAccessToken: String
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  revision_ASC
  revision_DESC
  wunderlistAccessToken_ASC
  wunderlistAccessToken_DESC
}

type UserPreviousValues {
  id: ID!
  name: String
  email: String
  revision: Int
  wunderlistAccessToken: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  name: String
  email: String
  revision: Int
  wunderlistAccessToken: String
}

input UserUpdateManyMutationInput {
  name: String
  email: String
  revision: Int
  wunderlistAccessToken: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  revision: Int
  revision_not: Int
  revision_in: [Int!]
  revision_not_in: [Int!]
  revision_lt: Int
  revision_lte: Int
  revision_gt: Int
  revision_gte: Int
  wunderlistAccessToken: String
  wunderlistAccessToken_not: String
  wunderlistAccessToken_in: [String!]
  wunderlistAccessToken_not_in: [String!]
  wunderlistAccessToken_lt: String
  wunderlistAccessToken_lte: String
  wunderlistAccessToken_gt: String
  wunderlistAccessToken_gte: String
  wunderlistAccessToken_contains: String
  wunderlistAccessToken_not_contains: String
  wunderlistAccessToken_starts_with: String
  wunderlistAccessToken_not_starts_with: String
  wunderlistAccessToken_ends_with: String
  wunderlistAccessToken_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
